@using BlazorApp.Shared;
@using BlazorApp.Client.Layout.PageComponents;

<div class="ContactSection">
    <div class="ContactHeader">
        <TitleComponent Title="@Title" Level=3/>
        <input type="text" class="SearchInput" @bind="SearchQuery" placeholder="Search..." @oninput="HandleSearchInput"  />
    </div>
    <hr>
     <div class="ContactListContainer">
        @if (FilteredContacts != null && FilteredContacts.Any())
        {
                <ContactList Contacts="@FilteredContacts" Height="@Height" Width="@Width" OnContactSelected="@OnContactSelected"/>
        }
        else
        {
                <div class="EmptyListMessage">No results...</div>
        }
    </div>
</div>

<style>
    .ContactSection 
    {
        width: calc(@Width + 20px);
        padding: 10px;
        background-color: #fff;
        border-radius: 10px;
    }

    .ContactListContainer {
    min-height: @Height; /* Adjust the minimum height as needed */
    min-width: @Width; /* Adjust the minimum width as needed */
}

.EmptyListMessage {
    padding: 10px;
}

    .ContactHeader {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .SearchInput {
        width: 200px;
        padding: 5px;
        border-radius: 10px;
        border: 1px solid #ccc;
        margin-bottom: 4px;
    }

    .ContactSection hr 
    {
        margin: 0;
        border: 0;
        border-top: 2px solid #000000;
    }
</style>

@code {
    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool IsForSearching { get; set; }

    [Parameter]
    public List<ContactModel> Contacts { get; set; }



    private Timer debounceTimer; //Timer to limit the number of search requests that are done 

    private string SearchQuery { get; set; } = ""; //The search query entered by the user

    private List<ContactModel> FilteredContacts { get; set; } //The contacts that match the search query

    [Parameter]
    public EventCallback<ContactModel> OnContactSelected { get; set; }

    private async Task HandleContactClicked(ContactModel clickedContact)
    {
        // Forward the event callback to the parent component
        await OnContactSelected.InvokeAsync(clickedContact);
    }

    protected override void OnInitialized()
    {
        FilteredContacts = Contacts.ToList(); // Initialize with all contacts
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();

        if (debounceTimer != null)
        {
            debounceTimer.Dispose();
        }

        debounceTimer = new Timer(state =>
        {
            SearchContacts();
            StateHasChanged(); // Update the UI
        }, null, 300, Timeout.Infinite);
    }

    private void SearchContacts()
    {
        FilteredContacts = Contacts
            .Where(c => string.IsNullOrWhiteSpace(SearchQuery) || c.Username.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}
